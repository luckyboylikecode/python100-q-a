3：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？
import math
def find_numbers():
    results = set();#使用集合而非列表或者元组，因为集合元素非重复。
    for i in range(1, 84):
        if 168 % i == 0:
            n1m = i;
            n2m = 168 // i;
            n = (n1m + n2m) / 2;
            m = (n1m - n2m) / 2;
            if n > m and n.is_integer() and m.is_integer():
                results.add(int(m**2 - 100));
    return results;
print(find_numbers());
4：输入某年某月某日，判断这一天是这一年的第几天？
import math
def what_day(year, month, date):
    big = [1,3,5,7,8,10,12];
    small = [4,6,9,11];
    num = date;
    while month > 1:
        month = month - 1;
        if month in big:
            num = num + 31;
        elif month in small:
            num = num + 30;
        else:
            num = num + 28;
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:#闰年
        if month > 2:
            num = num + 1
    return num

year = int(input())
month = int(input())
date = int(input())
numb = what_day(year,month,date)
print(f'这一天是这一年的第{numb}天');

5.输入三个整数x,y,z，请把这三个数由小到大输出。
import math
def max_num(x1, y1, z1):
    if x1 > y1:
       x1, y1 = y1, x1
    if y1 > z1:
        y1, z1 = z1, y1
    if x1 > z1:
        x1, z1 = z1, x1
    return x1, y1, z1

x, y, z = map(int, input().split())
x1, y1, z1 = max_num(x, y, z)
print(x1, y1, z1)

6.斐波那契数列（Fibonacci sequence），又称黄金分割数列，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……。
import math
def fib(num0):
    if num0 == 0:
        return 0
    elif num0 == 1:
        return 1
    else:
        return fib(num0-1) + fib(num0-2)

a = input('要输出斐波那契数列的第几项？\n')
print(fib(int(a)))


7.将一个列表的数据复制到另一个列表中
import math
#列表复制分为浅拷贝和深拷贝，深拷贝是指针两个
#指针指向同一个内容，浅拷贝就是简单一点只是把内容复制一下

def copy1(list1):##深拷贝
    list2 = list1
    return list2
def copy2(list1):##浅拷贝
    list2 = list1[:]
    return list2


list3 = list(map(int, input().split(",")))
print(list3)
print(copy1(list3))
print(copy2(list3))


8.输出 9*9 乘法口诀表。
import math
def multiplication_list():
    for i in range(1,9):
        print(f'{i}x{i} = {i**2}')

print("输入Yes,输出9*9乘法表")
if input() == 'Yes':
    multiplication_list()
else:
    print('非法输入')

9.暂停一秒输出。
import time#导入time库
def p_time(a):
    time.sleep(a)
curtime1 = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
print('暂停前的时间是'+curtime1)
print('请输入要暂停程序使用的时间？')
p_time(int(input()))
curtime2 = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
print('暂停后的时间是'+curtime2)


10.暂停一秒输出，并格式化当前时间。
import time#导入time库
def timeandstrf():
    time.sleep(1)
    #strftime的意思是string format time
    #strftime(format,t)format里面是一个字符串
    current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    print("当前时间：",current_time)

print('下面为当前时间暂停一秒后的时间:\n')
timeandstrf()


11.古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？
import math
#简单算一下每个月的兔子对数是1,1,2,3,5,8,13,21
#就是从第三个月开始，每个月都是前两个月相加
def sum_rabbit(month):
    if month == 1 or month == 2:
        return 2
    else:
        return sum_rabbit(month-1) * 2 + sum_rabbit(month-2) * 2

month = int(input('请输入算地几个月的兔子总数'))
print(sum_rabbit(month))

12.判断101-200之间有多少个素数，并输出所有素数。
import math
def is_sushu():
    for i in range(101, 201):
        is_su = 1
        for j in range(2, int(math.sqrt(i))):
            if i % j == 0:
                is_su = 0
                break
        if is_su:
            print(i)

print('下面为101-200之间的所有素数')
is_sushu()


13.打印出所有的"水仙花数"，所谓"水仙花数"是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个"水仙花数"，因为153=1的三次方＋5的三次方＋3的三次方。

import math
def shuixianhua():
    for i in range(100, 1000):
        ge = i % 10
        shi = i // 10 % 10
        bai = i // 100
        if ge**3 + shi**3 + bai**3 == i:
            print(i)

shuixianhua()

14.将一个正整数分解质因数。例如入90,打印出90=2*3*3*5

import math
def yinshifenjie(a):
    items = []
    zhi = 2
    while a > 1:
        while a % zhi == 0:
            items.append(zhi)
            a = a // zhi
        zhi += 1
    return items

a = input('请输入因式分解的整数')
a = int(a)
yinshi = yinshifenjie(a)
print(f'{a}=',end='')
j = 1
for i in yinshi:
    if j != len(yinshi):
        print(f'{i}*',end='')
        j += 1
    else:
        print(f'{i}.',end='')


15.利用条件运算符的嵌套来完成此题：学习成绩>=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示
import math
def score_level(score):
    if score >= 90:
        return 'A'
    elif score >=60:
        return 'B'
    else:
        return 'C'

score = input('请输入你的成绩')
score = int(score)
print('你的等级是'+score_level(score))

16.输出指定格式的日期。
import math
from datetime import datetime
time = datetime.now()
formatted_date = time.strftime("%Y-%m-%d %H:%M:%S")
print('当前时间为:'+formatted_date)

17.输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。

import math
import string
from datetime import datetime
def tongji(s):
    alpha, space = 0, 0
    digit, sym = 0, 0
    for i in s:
        if i.isalpha():
            alpha += 1
        elif i == ' ':
            space += 1
        elif i.isdigit():
            digit += 1
        else:
            sym += 1
    return alpha, space, digit, sym

if __name__ == '__main__':
    s = input()
    a, sp, d, sy = tongji(s)
    print(f'字母,空格,数字,其他字符的个数分别为{a},{sp},{d},{sy}')

18.求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加由键盘控制。
import math
import string
from datetime import datetime
def duo(a,n):
    sum1 = []
    it = a
    sum1.append(it)
    for i in range(2,n+1):
        it = it * 10
        it += a
        sum1.append(it)
    return sum(sum1)
a, n = map(int, input().split())
print(duo(a, n))

19.一个数如果恰好等于它的因子之和，这个数就称为"完数"。例如6=1＋2＋3.编程找出1000以内的所有完数
import math
import string
from datetime import datetime
def yinzi(a):
    yinzi = [1]
    for i in range(2,a):
        if a % i == 0:
            yinzi.append(i)
    return yinzi
def is_wanshu(a):
    yin = yinzi(a)
    if sum(yin) == a:
        return 1
    else:
        return 0

if __name__ == '__main__':
    for i in range(2,1001):
        if is_wanshu(i):
            yinzilist = yinzi(i)
            print(i)
            for item in yinzilist:
                print(item,end=' ')
            print()

20.一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？
import math
import string
from datetime import datetime
def highm():
    sum = 100
    hight = 100
    for i in range(1,10):
        hight = hight / 2
        sum += hight*2
    hight = hight / 2
    print(f'共经过{sum}米,第10次反弹{hight}米')

if __name__ == '__main__':
    highm()

21.猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。
import math
import string
from datetime import datetime
def monkey_tao():
    sum_tao = 1
    for i in range(1,10):
        sum_tao = (sum_tao+1) * 2
    return sum_tao
if __name__ == '__main__':
    a = monkey_tao()
    print(f'第一天共摘了{a}个桃子')

22.两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。

import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def team_two():
    team_A = ['a', 'b', 'c']
    team_B = ['x', 'y', 'z']
    all_B = itertools.permutations(team_B)#返回的对象是一个迭代器
    #迭代器和列表的区别就是迭代器不是即时生成的，类似唯心主义，你不需要
    #时就不存在
    for game in all_B:
        ga, gb, gc = game
        if ga != 'x' and gc != 'x' and gc != 'z':
            print(f'比赛结果为:a -- {ga},b -- {gb},c -- {gc}')



if __name__ == '__main__':
    team_two()

23.打印出如下图案（菱形）
 *
  ***
 *****
*******
 *****
  ***
   *
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def print_pattern():
    for i in range(1,4):
        print(' ' * (4-i),end='')
        print('*' * (2*i-1))
    print('*' * 7)
    for i in range(3,0,-1):
        print(' ' * (4-i),end='')
        print('*' * (2*i-1))
if __name__ == '__main__':
    print_pattern()

24.有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。

import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def sequence_sum():
    f1, f2 = 1.0, 2.0
    sum = 0.0
    for i in range(1,21):
        sum += f2/f1
        f1,f2 = f2,f1+f2
    return sum
if __name__ == '__main__':
    a = sequence_sum()
    print(f'前20项之和为{a}')

25.求1+2!+3!+...+20!的和。
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def easy_factorial():
    sum = 0
    for i in range(1,21):
        sum += math.factorial(i)
    return sum

def dif_factorial():
    sum = 0
    fac = 1
    for i in range(1,21):
        fac *= i
        sum += fac
    return sum


if __name__ == '__main__':
    print('请输入1or2,1.函数方法，2.循环方法计算1到20的阶乘和')
    a = int(input())
    if a == 1:
        print(easy_factorial())
    elif a == 2:
        print(dif_factorial())
    else:
        print('输入错误，请仅仅输入1或者2')


26.递归方式求5！
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def factorial_num(a):
    if a == 1:
        return 1
    else:
        return a * factorial_num(a-1)

if __name__ == '__main__':
    b = factorial_num(5)
    print(b)

27.利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。

import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def reverse_print(s,l):
    if l > 0:
        print(s[l-1],end='')
        reverse_print(s,l-1)

if __name__ == '__main__':
    print('请输入五个字符')
    str1 = input()
    l1 = len(str1)
    reverse_print(str1,l1)

28.有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？

import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def nianling(n):
    if n == 1:
        return 10
    else:
        return nianling(n-1)+2


if __name__ == '__main__':
    ni = nianling(5)
    print(ni)


29.给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def integer_wei(n):
    a = n // 10000
    b = n // 1000 % 10
    c = n // 100 % 10
    d = n // 10 % 10
    e = n % 10
    if a != 0:
        print(f'五位数{e}{d}{c}{b}{a}')
    elif b != 0:
        print(f'四位数{d}{c}{b}{a}')
    elif c != 0:
        print(f'三位数{c}{b}{a}')
    elif d != 0:
        print(f'二位数{b}{a}')
    elif e != 0:
        print(f'一位数{a}')

if __name__ == '__main__':
    a = int(input())
    integer_wei(a)

30.一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
def huiwen(n):
    a = n // 10000
    b = n // 1000 % 10
    c = n // 100 % 10
    d = n // 10 % 10
    e = n % 10
    if a == e and b == d:
        print('是回文数')
    else:
        print('不是回文数')

if __name__ == '__main__':
    n = int(input())
    huiwen(n)

31.请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。

import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
#monday,tuesday,wednesday,thursday,friday,saturday,sunday
def whichday(s):
    if s[0] == 'm':
        return '周一'
    elif s[0] == 'w':
        return '周三'
    elif s[0] == 'f':
        return '周五'
    elif s[0] == 't':
        if s[1] == 'u':
            return '周二'
        else:
            return '周四'
    elif s[0] == 's':
        if s[1] == 'a':
            return '周六'
        else:
            return '周日'
    else:
        return '输入错误'

if __name__ == '__main__':
    n = input()
    which = whichday(n)
    print(which)
32.按相反的顺序输出列表的值。
import math
import string
from datetime import datetime
import itertools #迭代器和排列组合
#monday,tuesday,wednesday,thursday,friday,saturday,sunday
def reverse_list(s,l):
    for i in range(l-1,-1,-1):
        print(s[i],end=' ')


if __name__ == '__main__':
    str1 = map(str,input().split(' '))
    str1 = list(str1)
    le = len(str1)
    reverse_list(str1,le)

33.
按逗号分隔列表。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def splitdouhao(L):
    s1 = ','.join(map(str, L))
    print(s1)

if __name__ == '__main__':
    L = [1,2,3,4,5,6,7]
    splitdouhao(L)


34.练习函数调用。使用函数，输出三次 RUNOOB 字符串。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def print_str():
    print('RUNBOOB')

if __name__ == '__main__':
    print_str()
    print_str()
    print_str()

35.
文本颜色设置。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合




def text__color():
    print(Fore.RED + '这是红色')
    print(Fore.GREEN + '这是绿色')
    print(Fore.BLUE + '这是蓝色')

if __name__ == '__main__':
    text__color()

36.求100之内的素数。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def is_prime(a):
    for i in range(2,a):
        if a % i == 0:
            return 0
    return 1
def primein100():
    for j in range(1,101):
        if is_prime(j):
            print(j,end=' ')
if __name__ == '__main__':
    primein100()

37.对10个数进行排序。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr [j+1]:
                arr[j],arr[j+1] = arr[j+1],arr[j]

    return arr
if __name__ == '__main__':
    L = list(map(int, input().split()))
    L_xu = bubble_sort(L)
    print(L_xu)

38.求一个3*3矩阵主对角线元素之和。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def matrix_diagonal(arr,n):
    sum = 0
    for i in range(n):
        for j in range(n):
            if i == j:
                sum += arr[i][j]
    return sum

if __name__ == '__main__':

    L = list(map(int, input('请输入9个数字组成一个3*3的二维数组').split()))
    matrix = [L[i*3:(i+1)*3]for i in range(3)]
    print(matrix_diagonal(matrix,3))


39.有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。

import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def insert_and_sort(arr,a):
    l = len(arr)
    if a >= arr[l-1]:
        arr.append(a)
    else:
        for i in range(l):
            if a > arr[i] and a < arr[i+1]:
                arr.insert(i+1,a)
    return arr

if __name__ == '__main__':
    l = list(map(int,input().split()))
    a = int(input())
    l = insert_and_sort(l,a)
    print(l)



40.将一个数组逆序输出。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def reverse_print(arr):
    arr.reverse()
    print(arr)

if __name__ == '__main__':
    l = list(map(int,input().split()))
    reverse_print(l)


41.模仿静态变量的用法。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
class MyClass:
    me = 0#类的属性属于静态变量

    def function():
        MyClass.me += 1
        print('MyClass.me=',MyClass.me)

if __name__ == '__main__':
    MyClass.function()#静态变量
    MyClass.function()
    MyClass.function()


42.学习使用auto定义变量的用法。
import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
def auto():
    num = 1
    print('%d'%num)
    num += 1

if __name__ == '__main__':
    num = 5
    for i in range(5):
        num += 1
        print('外面的num%d'%num)
        auto()


43.模仿静态变量(static)另一案例。（同41）

import math
import string
from colorama import Fore, Style
from datetime import datetime
import itertools #迭代器和排列组合
class MyClass:
    me = 0#类的属性属于静态变量

    def function():
        MyClass.me += 1
        print('MyClass.me=',MyClass.me)

if __name__ == '__main__':
    MyClass.function()#静态变量
    MyClass.function()
    MyClass.function()

44.两个 3 行 3 列的矩阵，实现其对应位置的数据相加，并返回一个新矩阵：
